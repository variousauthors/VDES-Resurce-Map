.row
  .col-md-12
    .map-container
      #map

.row.overflow-y.scroll
  .col-md-12
    table.table.table-striped.table-hover
      thead
        tr
          th Name
          th Address
          th Phone
          th Category
          th Tags
          th Actions

      tbody
        - @services.each do |service|
          tr { data-id = service.id }
            /td= link_to_if can?(:show, service), service.id, service_path(service)
            td= link_to(service.name, service_path(service)) + "#{ " *" if service.has_notes? }"
            td= service.address
            td= service.phone
            td= text_with_icon(service.category_name, category_icon_name(service.category_name))
            td= service.tag_list.map {|tag| text_with_icon(tag, tag_icon_name(tag)) }.join(", ").html_safe
            td
              /- if can? :edit, service
              = link_to text_with_icon('Edit', 'edit'), edit_service_path(service), class: 'btn btn-default btn-xs'
              '
              /- if can? :destroy, service
              /- = link_to text_with_icon('Destroy', 'remove'), service_path(service),
              /-          method: :delete, data: { confirm: "Are you sure?" }, class: 'btn btn-default btn-xs btn-danger'

/- if can? :create, Service
= link_to text_with_icon('New Service', 'plus'), new_service_path, class: 'btn btn-primary'

javascript:
  var handler = Gmaps.build('Google');

  $.ajax({ url: "#{ services_path(format: :json) }" }).done(function(data) { 

    handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
      var markers = [];

      data.forEach(function (datum, index) {
        var marker = handler.addMarker(datum),
            id = datum.id;

        markers.push(marker);

        marker.getServiceObject().addListener("mouseover", function (point) { 
          $("tr[data-id=" + id + "]").addClass("success");
        });

        marker.getServiceObject().addListener("mouseout", function (point) { 
          $("tr[data-id=" + id + "]").removeClass("success");
        });
      });

      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
    });

  })
