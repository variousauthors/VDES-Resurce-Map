$(function () {
    var handler = Gmaps.build('Google', { markers: { clusterer: {gridSize: 30, maxZoom: 15}  }  }),
        markers = [];

    function make_map_maker (row, datum, index) {
        var $row = $(row), marker, id = datum.id,
            white_icon = {
                url: "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=" + (index + 1) + "|F9F9F9|000000",
                width: 32,
                height: 32
            },
            green_icon = {
                url: "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=" + (index + 1) + "|DFF0D8|000000",
                width: 32,
                height: 32
            };

        datum.picture = white_icon;

        marker = handler.addMarker(datum);
        markers.push(marker);

        $row.on('mouseover', function () {
            marker.getServiceObject().setIcon(green_icon)
        });

        $row.on('mouseout', function () {
            marker.getServiceObject().setIcon(white_icon)
        });

        marker.getServiceObject().addListener("mouseover", function (point) {
            $("tr[data-id=" + id + "]").addClass("success");
        });

        marker.getServiceObject().addListener("mouseout", function (point) {
            $("tr[data-id=" + id + "]").removeClass("success");
        });
    };

    function make_wish_map_marker (row, datum, index) {
        var $row = $(row), id = datum.id, marker,
            wish_icon = {
                url: "<%= image_path("WISH_icon-tiny.png") %>",
                width: 32,
                height: 32
            };

        datum.picture = wish_icon;

        marker = handler.addMarker(datum);
        markers.push(marker);
    };

    handler.setOptions({markers: { do_clustering: true }})
    handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
        var sw, ne, dtes, legend;

        $(".service").each(function (index, row) {
            var $row = $(row), datum = $row.data(),
                name = datum.name;

            if (name == "WISH Drop-In Centre Society") {
                make_wish_map_marker(row, datum, index);
            } else {
                make_map_maker(row, datum, index);
            }

        });

        // maybe do something in here later
        handler.getMap().addListener('bounds_changed', function () {
            // console.log(markers.filter(function (m) { return m.isVisible(); }).length);
        });

        sw = { lat: 49.2809577, lng: -123.11294959999998 };
        ne = { lat: 49.2840793, lng: -123.08914070000003 };

        dtes = new google.maps.LatLngBounds(sw, ne);
        handler.map.fitToBounds(dtes);

        // The custom USGSOverlay object contains the USGS image,
        // the bounds of the image, and a reference to the map.
        legend = new USGSOverlay(dtes, "<%= image_path("WISH_icon.png") %>", handler.getMap());
    });

    USGSOverlay.prototype = new google.maps.OverlayView();

    // Initialize the map and the custom overlay.

    /** @constructor */
    function USGSOverlay(bounds, image, map) {

        // Initialize all properties.
        this.bounds_ = bounds;
        this.image_ = image;
        this.map_ = map;

        // Define a property to hold the image's div. We'll
        // actually create this div upon receipt of the onAdd()
        // method so we'll leave it null for now.
        this.div_ = null;

        // Explicitly call setMap on this overlay.
        this.setMap(map);
    }

    /**
     * onAdd is called when the map's panes are ready and the overlay has been
     * added to the map.
     */
    USGSOverlay.prototype.onAdd = function() {

        var div = document.createElement('div');
        div.style.borderStyle = 'none';
        div.style.borderWidth = '0px';
        div.style.position = 'absolute';

        // Create the img element and attach it to the div.
        var img = document.createElement('img');
        img.src = this.image_;
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.position = 'absolute';
        div.appendChild(img);

        this.div_ = div;

        // Add the element to the "overlayLayer" pane.
        var panes = this.getPanes();
        panes.overlayLayer.appendChild(div);
    };

    USGSOverlay.prototype.draw = function() {

        // We use the south-west and north-east
        // coordinates of the overlay to peg it to the correct position and size.
        // To do this, we need to retrieve the projection from the overlay.
        var overlayProjection = this.getProjection();

        // Retrieve the south-west and north-east coordinates of this overlay
        // in LatLngs and convert them to pixel coordinates.
        // We'll use these coordinates to resize the div.
        var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
        var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

        // Resize the image's div to fit the indicated dimensions.
        var div = this.div_;
        div.style.left = sw.x + 'px';
        div.style.top = ne.y + 'px';
        div.style.width = (ne.x - sw.x) + 'px';
        div.style.height = (sw.y - ne.y) + 'px';
    };

    // The onRemove() method will be called automatically from the API if
    // we ever set the overlay's map property to 'null'.
    USGSOverlay.prototype.onRemove = function() {
        this.div_.parentNode.removeChild(this.div_);
        this.div_ = null;
    };
});
